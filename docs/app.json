[{"name":"app.R","content":"# This version is used in the PRS_Var folder, attempting to host the shiny app publicly on github\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(reshape2)\nlibrary(stringr)\nlibrary(ggsci)\n\n# Define the list of models\nmodel_list <- c(\"PGS000013\", \"PGS000018\", \"PGS000058\", \"PGS000296\", \"PGS000329\", \"PGS000337\", \"PGS000746\", \"PGS000747\", \"PGS000748\", \"PGS000749\", \"PGS000899\",\n                \"PGS001355\", \"PGS001780\", \"PGS001839\", \"PGS002048\", \"PGS002244\", \"PGS002775\", \"PGS002776\", \"PGS002809\", \"PGS003355\", \"PGS003356\", \"PGS003438\",\n                \"PGS003446\", \"PGS003725\", \"PGS003726\", \"PGS_LDP2Auto\", \"PGS_prscsx\")\n\ndf_ntile_norm <- bigreadr::fread2(\"/project/damrauer_shared/Users/sabramow/PRS_Var/data/CAD_PGS_ref_ntile.txt\")\n\ncustom_theme <- theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"white\"),\n    text = element_text(family = \"Arial\", size = 12),\n    plot.title = element_text(size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 14, hjust = 0.5),\n    axis.title.x = element_text(size = 14),\n    axis.title.y = element_text(size = 14),\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n\n# UI for Shiny App\nui <- fluidPage(\n  titlePanel(\"Plot CAD PRS\"),\n  sidebarLayout(\n    sidebarPanel(\n      checkboxGroupInput(\"selected_models\", \"Select Models\", choices = model_list, selected = model_list),\n      numericInput(\"seed_input\", \"Seed value:\", value = 2023),\n      sliderInput(\"sample_size_input\", \"Number of Individuals\", min = 1, max = 6, value = 5, step = 1),\n      actionButton(\"submit_button\", \"Generate Plot\")\n    ),\n    mainPanel(\n      plotOutput(\"score_plot\"),\n      p(\"Plot ancestry-normalized CAD polygenic risk scores for a random selection of individuals from a HGDP/1k Genomes reference population\")\n    )\n  )\n)\n\n\n# Server logic\nserver <- function(input, output) {\n  observeEvent(input$submit_button, {\n    req(input$selected_models)\n    model_selection <- input$selected_models\n    \n    seed_value <- isolate(input$seed_input)  # Retrieve the seed value\n    \n    set.seed(seed_value)  # Set the seed value\n    \n    ntile_list <- paste(\"ntile_\", model_selection, sep = \"\")\n    sample_size <- input$sample_size_input  # Get the user-selected sample size\n    random_ntile <- sample_n(df_ntile_norm, sample_size) %>% select(IID, all_of(ntile_list))\n    \n    melt_random_ntile <- melt(random_ntile, id = c(\"IID\")) %>%\n      mutate(variable = str_replace(variable, \"ntile_\", \"\"))\n    \n    melt_random_ntile$variable <- factor(melt_random_ntile$variable, levels = model_list)\n    \n    output$score_plot <- renderPlot({\n      ggplot(data = melt_random_ntile, aes(x = variable, y = value, color = IID, group = IID)) +\n        geom_line(size = 1.25) +\n        labs(x = \"Score\", y = \"Percentile\") +\n        custom_theme +\n        theme(axis.text.x = element_text(angle = 30, vjust = 0.5, hjust = 1)) +\n        scale_color_jama(guide = \"none\")\n    })\n  })\n}\n\n\n# Run the application\nshinyApp(ui = ui, server = server)\n\n\n\n","type":"text"}]
